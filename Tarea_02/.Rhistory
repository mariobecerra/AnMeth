tail(sort(sim_est))
head(sort(sim_est))
docs.sim <- which(sim_est>=0.004)
length(docs.sin)
length(docs.sim)
news[docs.sim,]
news[docs.sim,5]
news[docs.sim,1:5]
as.data.frame(news[docs.sim,])[1:5,]
news[doc.ind,]
tail(sort(sim_est), 1)
class(signtures)
class(signatures)
mat.split <- split(data.frame((signatures)), rep(1:20, each=10))
?split
mat.split
mat.hashed <- sapply(mat.split, function(mat){
apply(mat, 2, function(x){   sum(x) })
})
dim(mat.hashed)
mat.hashed <- data.frame(mat.hashed)
mat.hashed$doc_no <- 1:nrow(mat.hashed)
tab.1 <- table(mat.hashed[,1])
codes <- as.integer(names(tab.1[tab.1 >= 2]))
length(codes)
tab.1
names(tab.1[tab.1 >= 2])
codes
dim(mat.hashed)
mat.hashed[,1]
dim(mat.hashed)
mat.hashed[1,]
head(mat.hashed)
head(signatures)
length(signatures)
dim(signatures)
signatures[1:10,1:10]
length(hash.list)
hash.list[[1:20]]
hash.list[1
]
hash.list[1:30]
sample(1:(prime-1), 1)
sample(1:(prime-1), 1)
hash.list[199]
hash.list[[]]
a
shing
hash.list <- lapply(1:200, function (i){
a <- 1
b <-1
function (x){
(((sample(1:(prime-1), 1)*(x-1) +  sample(1:(prime-1), 1)) %% prime) %% shing) + 1
}
})
hash.list[2]
hash.list[2](5)
sapply(1:2, function(h) h(1))
sapply(c(1:2,1:2), function(h) h(1))
c(1:2,1:2)
matrix(1:4, ncol=2, nrow=2)
sapply(matrix(1:4, ncol=2, nrow=2), function(h) h(1))
hash_row
hash_renglon <- sapply(hash.list, function(h) h(1))
hash_renglon
hash_renglon <- sapply(hash.list, function(h) h(2))
hash_renglon
minhash_2 <- function(file, no_documents, hash.list, k){
con <- file(file,'r')
line <- readLines(con, 1)
shingle_no <- 1
current_shingle <- substr(line, 1, k)
n_hashes <- length(hash.list)
sig <- matrix(rep(Inf, no_documents*n_hashes), ncol = no_documents)
hash_row <- sapply(hash.list, function(h) h(1))
while(length(line) > 0){
document <- as.integer(substr(line, 8, 15))
## update the signature matrix
out <- update_mat(sig, document, hash_row)
line <- readLines(con, 1)
shingle <- substr(line, 1, k)
if(length(shingle)>0){
if(shingle != current_shingle){
if(shingle_no %% 10000 ==0){
print(shingle_no)
}
shingle_no <- shingle_no + 1
current_shingle <- shingle
hash_renglon <- sapply(hash.list, function(h) h(shingle_no))
}
}
}
close(con)
sig
}
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
signatures[1:10,1:10]
dim(signatures)
print(1)
minhash_2 <- function(file, no_documents, hash.list, k){
con <- file(file,'r')
line <- readLines(con, 1)
shingle_no <- 1
current_shingle <- substr(line, 1, k)
n_hashes <- length(hash.list)
sig <- matrix(rep(Inf, no_documents*n_hashes), ncol = no_documents)
hash_row <- sapply(hash.list, function(h) h(1))
while(length(line) > 0){
document <- as.integer(substr(line, 8, 15))
## update the signature matrix
out <- update_mat(sig, document, hash_row)
line <- readLines(con, 1)
shingle <- substr(line, 1, k)
if(length(shingle)>0){
if(shingle != current_shingle){
if(shingle_no %% 10000 ==0){
print(shingle_no)
}
print(single_no)
shingle_no <- shingle_no + 1
current_shingle <- shingle
hash_renglon <- sapply(hash.list, function(h) h(shingle_no))
}
}
}
close(con)
sig
}
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
save(signatures, file='./signatures.Rdata')
minhash_2 <- function(file, no_documents, hash.list, k){
con <- file(file,'r')
line <- readLines(con, 1)
shingle_no <- 1
current_shingle <- substr(line, 1, k)
n_hashes <- length(hash.list)
sig <- matrix(rep(Inf, no_documents*n_hashes), ncol = no_documents)
hash_row <- sapply(hash.list, function(h) h(1))
while(length(line) > 0){
document <- as.integer(substr(line, 8, 15))
## update the signature matrix
out <- update_mat(sig, document, hash_row)
line <- readLines(con, 1)
shingle <- substr(line, 1, k)
if(length(shingle)>0){
if(shingle != current_shingle){
if(shingle_no %% 10000 ==0){
print(shingle_no)
}
print(shingle_no)
shingle_no <- shingle_no + 1
current_shingle <- shingle
hash_renglon <- sapply(hash.list, function(h) h(shingle_no))
}
}
}
close(con)
sig
}
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
setwd('/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02')
news <- read.csv('news.csv', colClasses=c('NULL', 'character'), header=F, col.names=c('NULL', 'Cont'), quote="\"")
head(news, 4)
shingles <- function(text, k){
if(nchar(text) < k ){
stop('Document is too short')
}
else{
shingles.1 <- lapply(1:(nchar(text) - k +1), function(i){
substr(text, start = i, stop = i + k -1)
})
}
unique(Reduce('c', shingles.1))
}
shingles('Example', 2)
set.seed(124362)
shing<-756405
hash.list <- lapply(1:200, function (i){
a <- sample(1:(prime-1), 1)
b <- sample(1:(prime-1), 1)
function (x){
(((a*(x-1) + b) %% prime) %% shing) + 1
}
})
prime<-find_next_prime(756405)
library(matlab)
find_next_prime <- function(n){
if(isprime(n)){
n=n+1
}
i=0
k=n
while(!isprime(n+i)){
i=i+1
k=n+i
}
k
}
set.seed(124362)
shing<-756405
hash.list <- lapply(1:200, function (i){
a <- sample(1:(prime-1), 1)
b <- sample(1:(prime-1), 1)
function (x){
(((a*(x-1) + b) %% prime) %% shing) + 1
}
})
library(matlab)
find_next_prime <- function(n){
if(isprime(n)){
n=n+1
}
i=0
k=n
while(!isprime(n+i)){
i=i+1
k=n+i
}
k
}
prime<-find_next_prime(756405)
set.seed(124362)
shing<-756405
hash.list <- lapply(1:200, function (i){
a <- sample(1:(prime-1), 1)
b <- sample(1:(prime-1), 1)
function (x){
(((a*(x-1) + b) %% prime) %% shing) + 1
}
})
library(Rcpp)
sourceCpp('./update_mat.cpp')
minhash_2 <- function(file, no_documents, hash.list, k){
con <- file(file,'r')
line <- readLines(con, 1)
shingle_no <- 1
current_shingle <- substr(line, 1, k)
n_hashes <- length(hash.list)
sig <- matrix(rep(Inf, no_documents*n_hashes), ncol = no_documents)
hash_row <- sapply(hash.list, function(h) h(1))
while(length(line) > 0){
document <- as.integer(substr(line, 8, 15))
## update the signature matrix
out <- update_mat(sig, document, hash_row)
line <- readLines(con, 1)
shingle <- substr(line, 1, k)
if(length(shingle)>0){
if(shingle != current_shingle){
if(shingle_no %% 10000 ==0){
print(shingle_no)
}
print(shingle_no)
shingle_no <- shingle_no + 1
current_shingle <- shingle
hash_renglon <- sapply(hash.list, function(h) h(shingle_no))
}
}
}
close(con)
sig
}
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
save(signatures, file='./signatures.Rdata')
signatures[1:10,1:10]
set.seed(2805)
hash.list <- lapply(1:20, function (i){
a <- sample(1:(prime-1), 1)
b <- sample(1:(prime-1), 1)
function (x){
(((a*(x-1) + b) %% prime) %% shing) + 1
}
})
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
signatures[1:10,1:10]
max(signatures)
max(signatures!=Inf)
min(signatures)
sapply(hash.list, function(h) h(1))
sapply(hash.list, function(h) h(2))
sapply(hash.list, function(h) h(2))
sapply(hash.list, function(h) h(3))
sapply(hash.list, function(h) h(1000))
length(line)
line
line()
as.integer('51561654      ')
minhash_2 <- function(file, no_documents, hash.list, k){
con <- file(file,'r')
line <- readLines(con, 1)
shingle_no <- 1
current_shingle <- substr(line, 1, k)
n_hashes <- length(hash.list)
sig <- matrix(rep(Inf, no_documents*n_hashes), ncol = no_documents)
hash_row <- sapply(hash.list, function(h) h(1))
while(length(line) > 0){
document <- as.integer(substr(line, 8, 15))
## update the signature matrix
out <- update_mat(sig, document, hash_row)
line <- readLines(con, 1)
shingle <- substr(line, 1, k)
if(length(shingle)>0){
if(shingle != current_shingle){
if(shingle_no %% 10000 ==0){
print(shingle_no)
}
print(shingle_no)
shingle_no <- shingle_no + 1
current_shingle <- shingle
hash_row <- sapply(hash.list, function(h) h(shingle_no))
}
}
}
close(con)
sig
}
set.seed(2805)
shing<-756405
hash.list <- lapply(1:200, function (i){
a <- sample(1:(prime-1), 1)
b <- sample(1:(prime-1), 1)
function (x){
(((a*(x-1) + b) %% prime) %% shing) + 1
}
})
system.time(signatures <- minhash_2(file ='./shingles_ord.txt', no_documents=nrow(news)+2, hash.list=hash.list, k=6))
save(signatures, file='./signatures.Rdata')
signatures[1:10,1:10]
doc.ind <- 1
news[doc.ind,]
doc.1.sig <- signatures[,doc.ind]
sim_est <- apply(signatures, 2, function(x){mean(x==doc.1.sig)})
tail(sort(sim_est))
docs.sim <- which(sim_est>=0.004)
as.data.frame(news[docs.sim,])[1:10,]
mat.split <- split(data.frame((signatures)), rep(1:20, each=10))
mat.hashed <- sapply(mat.split, function(mat){
apply(mat, 2, function(x){   sum(x) })
})
mat.hashed <- data.frame(mat.hashed)
mat.hashed$doc_no <- 1:nrow(mat.hashed)
tab.1 <- table(mat.hashed[,1])
codes <- as.integer(names(tab.1[tab.1 >= 2]))
length(codes)
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[,i])
codes <- as.integer(names(tab.1[tab.1 >= 2]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
cands.tot <- t(Reduce('cbind',cands))
head(cands.tot)
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[,i])
codes <- as.integer(names(tab.1[tab.1 >= 2]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[,i])
codes <- as.integer(names(tab.1[tab.1 >= 2]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
?combn
i=1
tab.1 <- table(mat.hashed[,i])
tab.1
codes <- as.integer(names(tab.1[tab.1 >= 2]))
codes
3<Inf
codes <- as.integer(names(tab.1[tab.1 >= 2 && tab.1<Inf]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[,i])
codes <- as.integer(names(tab.1[tab.1 >= 2 && tab.1<Inf]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
cands.tot <- t(Reduce('cbind',cands))
class(cands)
cands
codes <- as.integer(names(tab.1[tab.1 >= 2 && tab.1<Inf]))
codes
tab.1 <- table(mat.hashed[,i])
tab.1
codes <- as.integer(names(tab.1[tab.1 >= 2 && tab.1<Inf]))
codes
as.integer(names(tab.1[tab.1 >= 2 & tab.1<Inf]))
codes <- as.integer(names(tab.1[tab.1 >= 2 & tab.1<Inf]))
tab.1<Inf
tab.1!=Inf
tab.1 <- table(mat.hashed[,1])
tab.1
tab.1 <- table(mat.hashed[mat.hashed<Inf,1])
tab.1
codes <- as.integer(names(tab.1[tab.1 >= 2]))
length(codes)
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[,i])
codes <- as.integer(names(tab.1[tab.1 >= 2 & tab.1<Inf]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
tab.1 <- table(mat.hashed[,i])
tab.1
tab.1 <- table(mat.hashed[mat.hashed<Inf,i])
tab.1
codes <- as.integer(names(tab.1[tab.1 >= 2 & tab.1<Inf]))
codes
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
out
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
cands <- lapply(1:20, function(i){
tab.1 <- table(mat.hashed[mat.hashed<Inf,i])
codes <- as.integer(names(tab.1[tab.1 >= 2 & tab.1<Inf]))
out <- lapply(codes, function(cod){
mat.hashed$doc_no[mat.hashed[,i] == cod]
})
Reduce('cbind',lapply(out, function(x){combn(x,2)}))
})
cands.tot <- t(Reduce('cbind',cands))
head(cands.tot)
cands.tot.2 <- unique(cands.tot)
dim(cands.tot.2)
x=1
shindles(news[x,],6)
shingles(news[x,],6)
sim.jaccard('a','a')
sim.jaccard <- function(a, b){
length(intersect(a, b)) / length(union(a, b))
}
sims.cand <- apply(cands.tot.2, 1, function(x){
#print(x)
shin.1 <- shingles(news[x,],6)
shin.2 <- shingles(news[x,],6)
sim.jaccard(shin.1, shin.2)
})
out <- cbind(cands.tot.2, sims.cand)
out <- out[order(out[,1]),]
head(out)
out_high <- out[out[,3]> 0.9,]
head(out_high)
head(out_high)[,1:2]
news[head(out_high)[,1:2]]
out_high[10,1:2]
out_high[1:10,1:2]
news[a]
a<-out_high[1:10,1:2]
news[a]
a
news[a[,1]]
news[,2]
news[2,]
news[a[1],]
news[a,]
news[2276,]
news[2,]
a
?acos
news[out[out[,1]==1677,2]]
out[,1]
out
head(out)
sim.jaccard('a','aa')
sim.jaccard('a','a')
sim.jaccard('a','b')
sim.jaccard('aaannscnñn sc','bsad aaa ckasc')
intersect('aaaa', 'bbbsa')
intersect
length(intersect('aaaa', 'bbbsa'))
shin.1 <- shingles(news[1,],6)
shin.2 <- shingles(news[2,],6)
sim.jaccard(shin.1, shin.2)
shin.1
shin.2
sim.jaccard(shin.1, shin.1)
sim.jaccard(c('shin.1', 'aaa'), c('shin.1', b))
sim.jaccard(c('shin.1', 'aaa'), c('shin.1', 'b'))
cands.tot.2
sims.cand <- apply(cands.tot.2[1:100], 1, function(x){
#print(x)
shin.1 <- shingles(news[x,],6)
shin.2 <- shingles(news[x,],6)
sim.jaccard(shin.1, shin.2)
})
sims.cand <- apply(cands.tot.2, 1, function(x){
#print(x)
shin.1 <- shingles(news[x,],6)
shin.2 <- shingles(news[x,],6)
sim.jaccard(shin.1, shin.2)
})
out <- cbind(cands.tot.2, sims.cand)
out <- out[order(out[,1]),]
out_high <- out[out[,3]> 0.9,]
head(out_high)[,1:2]
head(out_high)
tail(out_high)
