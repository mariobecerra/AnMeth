if (x>= a and x<= b)
I <- function(x, a, b){
if (x>= a && x<= b)
return 1
else
return 0
}
I <- function(x, a, b){
if (x>= a && x<= b)
return 1
I <- function(x, a, b){
if (x>= a && x<= b)
I=1
else
I=0
}
I(2,0,1)
I <- function(x, a, b){
if (x>= a && x<= b)
I=1
else
I=0
return I
}
I <-function(x, min=0, max=Inf)c{
as.numeric(x >= min) * as.numeric(x <= max)
}
I <-function(x, min=0, max=Inf) {
as.numeric(x >= min) * as.numeric(x <= max)
}
I(3, 2, 1)
I(3, 2, 4)
I(3, 2, 3)
I(3, 2, 2.5)
I(2,3)
I(4,3)
p <- function(n){
if(n==1) a <- 0.4
else if (n==2) a <- 0.5
else if (n==3) a <- 0.7
else a<-0
a
}
p(1)
p(2)
p(3)
p(5)
s <- 3
cc <- 2
d <- 4
vp <- 8
d_a <- function(n){
if(n==1) a <- 4
else if (n==2) a <- 5
else if (n==3) a <- 6
else a<-0
a
}
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
}
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
sum1
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
sum1
}
f_d_x(2,3)
f_d_x(1,3)
d_b <- function(n){
d_a(n) - 1
}
d_b(1)
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
sum2 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3)
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
sum2 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
p(3)
d_b(3) - x ) * vp * I(x, 0, d_b(3))
d_b(3) - 3 ) * vp * I(3, 0, d_b(3))
d_b(3) - 3 ) * vp * I(3, 0, d_b(3)
(d_b(3) - 3 ) * vp * I(3, 0, d_b(3)
)
f_d_x(1,3)
p <- function(n){
if(n==1) a <- 0.4
else if (n==2) a <- 0.5
else if (n==3) a <- 0.7
else stop("n=1, 2 o 3")
a
}
p(5)
d_a <- function(n){
if(n==1) a <- 4
else if (n==2) a <- 5
else if (n==3) a <- 6
else stop("n debe tomar valores 1, 2 o 3")
a
}
d_a(5)
d_a(2)
f_d_x <- function(s, x){
sum1_1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum2_1 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
x=3
s=1
x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
d_a(3) - x
d_a(3)
x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum1_1 + sum1_2 + sum1_3 + 4*x
sum1_1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum1
sum2_1 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
sum2
4*x
x*s
sal <- 3
f_d_x <- function(s, x){
sum1_1 <- x * sal + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum2_1 <- x * sal + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
f_d_x(4,1+)
f_d_x(4,1)
f_d_x(0,1)
f_d_x(2,1)
?min
?zeros
?zero
f_min <- function(s, n, num_x) {
b <- 0
for i in 1:num_x {
b[i] <- f_d_x(s, i)
}
if(n==4) a<- 4*x
else a <- min(b)
a
}
f_min <- function(s, n, num_x) {
b <- 0
for i in 1:num_x {
f_min <- function(s, n, num_x) {
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
if(n==4) a<- 4*x
else a <- min(b)
a
}
f_min(1,4,2)
f_min <- function(s, x, n, num_x) {
if(n==4) a <- 4*x
else{
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
a <- min(b)
}
a
}
num_x <- 10 #número de casos posibles de xn
f_min <- function(s, x, n, num_x) {
if(n==4) a <- 4*x
else{
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
a <- min(b, na.rm = TRUE)
}
a
}
f_min(1,3,3,x_num)
num_x <- 10 #número de casos posibles de xn
f_min(1,3,3,x_num)
x_num <- 10 #número de casos posibles de xn
f_min(1,3,3,x_num)
f_min(1,3,4,x_num)
f_d_x <- function(s, x, n){
sum1_1 <- x * sal + (d_a(n) - x ) * vp * I(x, 0, d_a(n))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + f_min(s, x, n, num_x)
sum2_1 <- x * sal + (d_b(n) - x ) * vp * I(x, 0, d_b(n))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + f_min(s, x, n, num_x)
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3,3)
f_d_x <- function(s, x, n){
sum1_1 <- x * sal + (d_a(n) - x ) * vp * I(x, 0, d_a(n))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + f_min(s, x, n, num_x)
sum2_1 <- x * sal + (d_b(n) - x ) * vp * I(x, 0, d_b(n))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + f_min(s, x, n, num_x)
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3,3)
n=3
d_a(n)
s
x
f_d_x(s,x,n)
library(twitteR)
z<-searchTwitter("#gold",n=150)
library(ROAuth)
load("/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/submuestra.RData")
head(submuestra)
names(submuestra)
noticias <- submuestra$Abstract[1:2000]
noticias <- data.frame(submuestra$Abstract[1:2000])
head(noticias)
a<-submuestra$Abstract[submuestra$Abstract>20]
length(submuestra$Abstract)
dimension(submuestra$Abstract)
as.char(submuestra$Abstract)
as(submuestra$Abstract, 'character')
nchar(submuestra$Abstract)
b<-nchar(as(submuestra$Abstract[0:100], character))
b<-as(submuestra$Abstract[0:100], 'character')
b[1:10]
nzchar(b[1:10])
rm(submuestra)
booleano<-nzchar(b)
b<-nchar(as(submuestra$Abstract, character))
b<-nchar(as(noticias, character))
noticias[1]
noticias[1]<-NULL
noticias[2]
load("/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/submuestra.RData")
?write.table
names(submuestra)
write.table(submuestra$Abstract, file='/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/noticias.csv', sep=',')
rm(submuestra)
0.75*xa+0.25*xb=36
xa<-seq(0,100,l=1000)
xb<-seq(0,100,l=1000)
plot(0.75*xa+0.25*xb-36)
lines(0.75*xa+0.25*xb-36)
lines(0.75*xa+0.25*xb-36)
lines(0.25*xa+0.25*xb=24)
lines(0.25*xa+0.25*xb-24)
lines(0.75*xa+0.25*xb-36)
plot(0,0)
xa<-seq(0,100,l=1000)
xb<-seq(0,100,l=1000)
plot(0,0)
lines(0.75*xa+0.25*xb-36)
lines(0.25*xa+0.25*xb-24)
lines(0.5xa+1.5*xb-72)
lines(0.75*xa+0.25*xb-36)
plot(0.75*xa+0.25*xb-36)
plot(0.75*xa+0.25*xb-36)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
lines(0.75*xa+0.25*xb-36)
plot(0,0)
lines(0.75*xa+0.25*xb-36)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
plot(0.75*xa+0.25*xb-36)
library(ggplot)
library(ggplot2)
ggplot(0.75*xa+0.25*xb-36)
plot(0.75*xa+0.25*xb-36)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
?plot
plot(0.75*xa+0.25*xb-36, type='l')
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
abline(0)
abline(a=0, b=0)
abline(a=0, b=100)
plot(0,0)
plot(0.75*xa+1.5*xb-36, type='l')
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+0.25*xb-72)
abline(a=0, b=0)
abline(a=0, b=100)
plot(0.75*xa+1.5*xb-36, type='l')
abline(a=0, b=0)
plot(0.75*xa+1.5*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+0.25*xb-72)
plot(0.75*xa+0.25*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
?simplex
library(boot)
?simplex
simplex(c(50,40), A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2), b2=c(36,24,72))
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5)
)
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2)
A2
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrows=T)
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrows=TRUE)
?matrix
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrow=TRUE)
A2
sim <- simplex(c(50,40), A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrow=TRUE), b2=c(36,24,72))
c(50,40)
A2
b2=c(36,24,72)
b2
length(b2)
length(A2)
a<-c(50,40)
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5)
A2=matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrow=TRUE))
A2<-matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrow=TRUE))
A2<-matrix(c(0.75, 0.25, 0.25, 0.25, 0.5, 1.5), nrow=3, ncol=2, byrow=TRUE)
b2=c(36,24,72)
sim <- simplex(a,A2=A2 , b2=b2)
A2%*%b2
A2%*%T(b2)
T(A2)
t(A2)
A2%*%t(b2)
A2
b2
sim <- simplex(a,A2=A2 , b2=t(b2))
sim <- simplex(t(a), A2=A2 , b2=b2)
sim <- simplex(a, A2=A2 , b2=b2)
sim <- simplex(a, A2=t(A2) , b2=b2)
plot(0.75*xa+0.25*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
lines(xa-24*7)
lines(xb-24*7)
24*7
plot(0.75*xa+0.25*xb-36, type='l')
lines(xa-24*7)
xa<-seq(0,1000,l=1000)
xb<-seq(0,1000,l=1000)
plot(0.75*xa+0.25*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
lines(xa-24*7)
lines(xb-24*7)
plot(xa+xb)
plot(0.75*xa+0.25*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
24*50+72*40
24+36+72
168/7
24*7
plot(0.75*xa+0.25*xb-36, type='l')
abline(a=0, b=0)
abline(a=0, b=100)
lines(0.25*xa+0.25*xb-24)
lines(0.5*xa+1.5*xb-72)
lines(xa+xb-24*7)
24*.75+72*.25
.25*24+.25*72
.5*24+1.5*72
plot(xa+x2-168)
plot(xa+xb-168)
library(Rcpp)
?adist
install.packages("raster")
library(sp)
library(rgdal)
library(tiff)
library(raster)
setwd('home/mbc/Dropbox/ITAM_Dropbox/Métodos Numéricos y Optimización/Workshop 2 (Imágenes satelitales)/Tarea 2')
setwd('home/mbc/Dropbox/ITAM_Dropbox/Métodos Numéricos y Optimización/Workshop 2 (Imágenes satelitales)')
getwd()
setwd('home/mbc/Dropbox/ITAM_Dropbox/Métodos Numéricos y Optimización')
c<-[-18,     2,    -4,    -4,     8,    16,     2,    12,   -19,     4]
c <- [-18,     2,    -4,    -4,     8,    16,     2,    12,   -19,     4]
a<-[1,2]
c <- c(-18,     2,    -4,    -4,     8,    16,     2,    12,   -19,     4)
b<-c(6,3)
A<-matrix(c(1,-8, 1,31, -10, 6,21,-3,-5,-9, 3,16, 8, 0,  -18,-8,  -16, 4,-6,-4), ncol=10, nrow=2)
simplex(c, A1=A, b1=b)
library(boot)
simplex(c, A1=A, b1=b)
library(igraph)
graph(c(1,2,1,4,1,3,2,1,2,4,3,1,4,3,2,3))
plot(graph(c(1,2,1,4,1,3,2,1,2,4,3,1,4,3,2,3)))
a <- graph(c(1,2,1,4,1,3,2,1,2,4,3,1,4,3,2,3))
as.matrix(a)
matrix(a)
mat <- get.adjacency(a)
mat
M <- t(scale(t(as.matrix(mat)), center=FALSE, scale=apply(mat,1,sum)))
M
eig(M)
eigen(M)
eigen(t(M))
library(igraph)
setwd("~/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_04")
data(USairports)
USairports
igraphdata::USairports
library(igraphdata)
USairports
USAirports
USairports
USairports
a <- USairports
library(‘igraphdata’)
library(igraphdata)
a <- USairports
load(USairports)
igraph::USairports
igraphdata::USairports
library(igraphdata)
USairports
load('USairports.rda')
?get.adjacency
adj <- get.adjacency(USairports)
adj
dim(adj)
air_df <- get.data.frame(USairports)
names(air_df)
plot(USairports)
head(air_df)
library(dplyr)
head(air_df)
?summarise
df <- group_by(air_df, from, to)
f
df
df <- group_by(air_df, from, to) %>% summarise(count=n())
df
head(air_df)
df <- group_by(air_df, from, to) %>% summarise(count=n(), weight=sum(Departures))
df
head(air_df)
filter(air_df, from='BGR', to='JFK')
?filter
filter(air_df, from=='BGR', to=='JFK')
filter(df, from=='BGR', to=='JFK')
tail(df)
?graph
?write.graph
?graph.data.frame
grpah <- graph.data.frame(df)
graph <- graph.data.frame(df)
graph
write.graph(graph, file='Airports_wighted.gml', formar='gml')
write.graph(graph, file='Airports_wighted.gml', format='gml')
graph_w <- graph.adjacency(adj, mode='directed', weighted=TRUE)
graph_w
E(graph_w)$weight
df$weight
E(graph_w)$weight - df_weight
E(graph_w)$weight - df$weight
E(graph_w)$weight <- df$weight
?E
write.graph(graph_w, file='Airports_weighted.gml', format='gml')
graph_w
?graph.adjacency
dim(adj)
adj
graph_w
E(graph_w)$name
get.data.frame(graph_w)
head(get.data.frame(graph_w))
head(air_df)
